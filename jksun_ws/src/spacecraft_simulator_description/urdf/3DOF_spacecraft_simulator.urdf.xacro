<?xml version="1.0"?>
<!-- Xacro format of the ARCL 3DOF spacecraft simulator. Can be parsed into
  an urdf. Xacro format used to pass in arguments for unique topic names for
  each respective 3DOF spacecraft model.

  Author: Jennifer Sun (jksun@caltech.edu) -->

<robot name="spacecraft_simulator">

<!--===========================================================================
SPACECRAFT SIMULATOR MODEL (specifies urdf link properties for 3DOF sc model)
============================================================================-->

  <!-- Represents the spacecraft simulator model -->
  <link name="base_link">
    <inertial>
      <!-- Mass and inertia according to solidworks model of full 3DOF sc -->
      <!-- <mass value="9.08"/> -->
      <mass value="19.890"/>
      <!-- Sets up center of mass of link at the bottom of the ball joint -->
      <origin xyz="0 0 0.74522"/>
      <!-- <inertia ixx="27.60" iyy="3.36" izz="28.06"
               ixy="-5.21" ixz="0.86" iyz="-4.00"/> -->
      <!-- From simplified 3DOF CAD -->
      <!-- <inertia ixx="2.51" iyy="0.50" izz="2.60"
               ixy="-0.55" ixz="0.16" iyz="-0.43"/> -->
      <!-- From complete 5DOF CAD -->
      <inertia ixx="4.09" iyy="0.68" izz="4.07"
               ixy="-0.11" ixz="0.03" iyz="-0.02"/>
    </inertial>

    <visual>
      <geometry>
        <mesh filename="package://spacecraft_simulator_description/meshes/sc_simple_ball.dae"/>
      </geometry>
    </visual>

    <collision>
      <!-- Determines position on link where collision is checked -->
      <origin xyz="0 0 0.41941"/>
      <geometry>
        <box size="0.4572 0.4572 0.83882"/>
      </geometry>
      <surface>
        <contact>
          <ode>
            <!-- Counts a collision at a minimum of 0.0 meters of overlap -->
            <min_depth>0.0</min_depth>
            <max_vel>0.5</max_vel>
          </ode>
        </contact>
        <friction>
          <ode>
            <mu>0.0</mu>
            <mu2>0.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
  </link>

<!--===========================================================================
GAZEBO PLUGINS (plugins used to connect ROS with the Gazebo model)
============================================================================-->

  <gazebo>
    <!-- Plugin that controls movement of the model using forces at relative
    positions to the model's center of mass. Designed the model forces applied
    at specific thruster locations. -->
    <plugin name="thruster_force_controller" filename="libspacecraft_thruster8_force.so">
      <bodyName>base_link</bodyName>
      <topicName>$(arg spacecraft_name)/thruster8_force</topicName>
    </plugin>

    <!-- Plugin that provides a 3D position interface for ground truth.
    Publishes pose of the spacecraft link in simulation using Odometry
    messages. -->
    <plugin name="sc_model_pose" filename="libgazebo_ros_p3d.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>100.0</updateRate>
      <bodyName>base_link</bodyName>
      <topicName>$(arg spacecraft_name)_pose</topicName>
      <gaussianNoise>0.0</gaussianNoise>
      <frameName>map</frameName>
      <xyzOffsets>0 0 0</xyzOffsets>
      <rpyOffsets>0 0 0</rpyOffsets>
    </plugin>
  </gazebo>

  <!-- Plugin that controls planar movement of the model using velocity. -->
  <!-- <plugin name="object_controller" filename="libgazebo_ros_planar_move.so">
    <commandTopic>cmd_vel</commandTopic>
    <odometryTopic>odom</odometryTopic>
    <odometryFrame>odom</odometryFrame>
    <odometryRate>20.0</odometryRate>
    <robotBaseFrame>base_link</robotBaseFrame>
  </plugin> -->

  <!-- Plugin that controls movement of the model using forces and torques at
  the model's center of mass. -->
  <!-- <plugin name="force_controller" filename="libgazebo_ros_force.so">
    <bodyName>base_link</bodyName>
    <topicName>ros_force</topicName>
  </plugin> -->

  <!-- Specific format for gazebo sensor plugin. Uses a gazebo sensor for
  simulating an inertial mostion sensor. -->
  <!-- <gazebo reference="sc">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>__default_topic__</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>$(arg spacecraft_name)/Imu</topicName>
        <bodyName>base_link</bodyName>
        <updateRateHZ>10.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>sc</frameName>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo> -->

</robot>
