# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hivemind/Thrusters16.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Thrusters16(genpy.Message):
  _md5sum = "560359edb648a0c537e3d3a2564ae554"
  _type = "hivemind/Thrusters16"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """#Thruster values for the 16DOF (16 thruster) Spacecraft simulator
std_msgs/Header header
float32 FXmMZm
float32 FXmMZp
float32 FYmMZm
float32 FYmMZp
float32 FXpMZm
float32 FXpMZp
float32 FYpMZm
float32 FYpMZp
float32 FZpMYm
float32 FZmMYp
float32 FZpMXp
float32 FZmMXm
float32 FZpMYp
float32 FZmMYm
float32 FZmMXp
float32 FZpMXm

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','FXmMZm','FXmMZp','FYmMZm','FYmMZp','FXpMZm','FXpMZp','FYpMZm','FYpMZp','FZpMYm','FZmMYp','FZpMXp','FZmMXm','FZpMYp','FZmMYm','FZmMXp','FZpMXm']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,FXmMZm,FXmMZp,FYmMZm,FYmMZp,FXpMZm,FXpMZp,FYpMZm,FYpMZp,FZpMYm,FZmMYp,FZpMXp,FZmMXm,FZpMYp,FZmMYm,FZmMXp,FZpMXm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Thrusters16, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.FXmMZm is None:
        self.FXmMZm = 0.
      if self.FXmMZp is None:
        self.FXmMZp = 0.
      if self.FYmMZm is None:
        self.FYmMZm = 0.
      if self.FYmMZp is None:
        self.FYmMZp = 0.
      if self.FXpMZm is None:
        self.FXpMZm = 0.
      if self.FXpMZp is None:
        self.FXpMZp = 0.
      if self.FYpMZm is None:
        self.FYpMZm = 0.
      if self.FYpMZp is None:
        self.FYpMZp = 0.
      if self.FZpMYm is None:
        self.FZpMYm = 0.
      if self.FZmMYp is None:
        self.FZmMYp = 0.
      if self.FZpMXp is None:
        self.FZpMXp = 0.
      if self.FZmMXm is None:
        self.FZmMXm = 0.
      if self.FZpMYp is None:
        self.FZpMYp = 0.
      if self.FZmMYm is None:
        self.FZmMYm = 0.
      if self.FZmMXp is None:
        self.FZmMXp = 0.
      if self.FZpMXm is None:
        self.FZpMXm = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.FXmMZm = 0.
      self.FXmMZp = 0.
      self.FYmMZm = 0.
      self.FYmMZp = 0.
      self.FXpMZm = 0.
      self.FXpMZp = 0.
      self.FYpMZm = 0.
      self.FYpMZp = 0.
      self.FZpMYm = 0.
      self.FZmMYp = 0.
      self.FZpMXp = 0.
      self.FZmMXm = 0.
      self.FZpMYp = 0.
      self.FZmMYm = 0.
      self.FZmMXp = 0.
      self.FZpMXm = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_16f().pack(_x.FXmMZm, _x.FXmMZp, _x.FYmMZm, _x.FYmMZp, _x.FXpMZm, _x.FXpMZp, _x.FYpMZm, _x.FYpMZp, _x.FZpMYm, _x.FZmMYp, _x.FZpMXp, _x.FZmMXm, _x.FZpMYp, _x.FZmMYm, _x.FZmMXp, _x.FZpMXm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.FXmMZm, _x.FXmMZp, _x.FYmMZm, _x.FYmMZp, _x.FXpMZm, _x.FXpMZp, _x.FYpMZm, _x.FYpMZp, _x.FZpMYm, _x.FZmMYp, _x.FZpMXp, _x.FZmMXm, _x.FZpMYp, _x.FZmMYm, _x.FZmMXp, _x.FZpMXm,) = _get_struct_16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_16f().pack(_x.FXmMZm, _x.FXmMZp, _x.FYmMZm, _x.FYmMZp, _x.FXpMZm, _x.FXpMZp, _x.FYpMZm, _x.FYpMZp, _x.FZpMYm, _x.FZmMYp, _x.FZpMXp, _x.FZmMXm, _x.FZpMYp, _x.FZmMYm, _x.FZmMXp, _x.FZpMXm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.FXmMZm, _x.FXmMZp, _x.FYmMZm, _x.FYmMZp, _x.FXpMZm, _x.FXpMZp, _x.FYpMZm, _x.FYpMZp, _x.FZpMYm, _x.FZmMYp, _x.FZpMXp, _x.FZmMXm, _x.FZpMYp, _x.FZmMYm, _x.FZmMXp, _x.FZpMXm,) = _get_struct_16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_16f = None
def _get_struct_16f():
    global _struct_16f
    if _struct_16f is None:
        _struct_16f = struct.Struct("<16f")
    return _struct_16f
