# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hivemind/CVXpyRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class CVXpyRequest(genpy.Message):
  _md5sum = "0e30bdb1c0d2912e355585699a39d0ac"
  _type = "hivemind/CVXpyRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point x_0
geometry_msgs/Point x_f
float64 U_max
geometry_msgs/PoseArray nodes
std_msgs/Float64MultiArray radii
int64 num_steps
int64 num_this_path
int64 type_of_dynamics
float64 delta_t
std_msgs/Int64MultiArray which_radius_array
std_msgs/Int64MultiArray this_path

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/Float64MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float64[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: std_msgs/Int64MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
int64[]           data          # array of data

"""
  __slots__ = ['x_0','x_f','U_max','nodes','radii','num_steps','num_this_path','type_of_dynamics','delta_t','which_radius_array','this_path']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','float64','geometry_msgs/PoseArray','std_msgs/Float64MultiArray','int64','int64','int64','float64','std_msgs/Int64MultiArray','std_msgs/Int64MultiArray']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_0,x_f,U_max,nodes,radii,num_steps,num_this_path,type_of_dynamics,delta_t,which_radius_array,this_path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CVXpyRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_0 is None:
        self.x_0 = geometry_msgs.msg.Point()
      if self.x_f is None:
        self.x_f = geometry_msgs.msg.Point()
      if self.U_max is None:
        self.U_max = 0.
      if self.nodes is None:
        self.nodes = geometry_msgs.msg.PoseArray()
      if self.radii is None:
        self.radii = std_msgs.msg.Float64MultiArray()
      if self.num_steps is None:
        self.num_steps = 0
      if self.num_this_path is None:
        self.num_this_path = 0
      if self.type_of_dynamics is None:
        self.type_of_dynamics = 0
      if self.delta_t is None:
        self.delta_t = 0.
      if self.which_radius_array is None:
        self.which_radius_array = std_msgs.msg.Int64MultiArray()
      if self.this_path is None:
        self.this_path = std_msgs.msg.Int64MultiArray()
    else:
      self.x_0 = geometry_msgs.msg.Point()
      self.x_f = geometry_msgs.msg.Point()
      self.U_max = 0.
      self.nodes = geometry_msgs.msg.PoseArray()
      self.radii = std_msgs.msg.Float64MultiArray()
      self.num_steps = 0
      self.num_this_path = 0
      self.type_of_dynamics = 0
      self.delta_t = 0.
      self.which_radius_array = std_msgs.msg.Int64MultiArray()
      self.this_path = std_msgs.msg.Int64MultiArray()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.x_0.x, _x.x_0.y, _x.x_0.z, _x.x_f.x, _x.x_f.y, _x.x_f.z, _x.U_max, _x.nodes.header.seq, _x.nodes.header.stamp.secs, _x.nodes.header.stamp.nsecs))
      _x = self.nodes.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.nodes.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodes.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.radii.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.radii.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.radii.layout.data_offset))
      length = len(self.radii.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.radii.data))
      _x = self
      buff.write(_get_struct_3qd().pack(_x.num_steps, _x.num_this_path, _x.type_of_dynamics, _x.delta_t))
      length = len(self.which_radius_array.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.which_radius_array.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.which_radius_array.layout.data_offset))
      length = len(self.which_radius_array.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.which_radius_array.data))
      length = len(self.this_path.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.this_path.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.this_path.layout.data_offset))
      length = len(self.this_path.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.this_path.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.x_0 is None:
        self.x_0 = geometry_msgs.msg.Point()
      if self.x_f is None:
        self.x_f = geometry_msgs.msg.Point()
      if self.nodes is None:
        self.nodes = geometry_msgs.msg.PoseArray()
      if self.radii is None:
        self.radii = std_msgs.msg.Float64MultiArray()
      if self.which_radius_array is None:
        self.which_radius_array = std_msgs.msg.Int64MultiArray()
      if self.this_path is None:
        self.this_path = std_msgs.msg.Int64MultiArray()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.x_0.x, _x.x_0.y, _x.x_0.z, _x.x_f.x, _x.x_f.y, _x.x_f.z, _x.U_max, _x.nodes.header.seq, _x.nodes.header.stamp.secs, _x.nodes.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nodes.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.nodes.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodes.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.nodes.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radii.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.radii.layout.dim.append(val1)
      start = end
      end += 4
      (self.radii.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.radii.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 32
      (_x.num_steps, _x.num_this_path, _x.type_of_dynamics, _x.delta_t,) = _get_struct_3qd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.which_radius_array.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.which_radius_array.layout.dim.append(val1)
      start = end
      end += 4
      (self.which_radius_array.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.which_radius_array.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.this_path.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.this_path.layout.dim.append(val1)
      start = end
      end += 4
      (self.this_path.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.this_path.data = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.x_0.x, _x.x_0.y, _x.x_0.z, _x.x_f.x, _x.x_f.y, _x.x_f.z, _x.U_max, _x.nodes.header.seq, _x.nodes.header.stamp.secs, _x.nodes.header.stamp.nsecs))
      _x = self.nodes.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.nodes.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodes.poses:
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.radii.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.radii.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.radii.layout.data_offset))
      length = len(self.radii.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.radii.data.tostring())
      _x = self
      buff.write(_get_struct_3qd().pack(_x.num_steps, _x.num_this_path, _x.type_of_dynamics, _x.delta_t))
      length = len(self.which_radius_array.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.which_radius_array.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.which_radius_array.layout.data_offset))
      length = len(self.which_radius_array.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.which_radius_array.data.tostring())
      length = len(self.this_path.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.this_path.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.this_path.layout.data_offset))
      length = len(self.this_path.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.this_path.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.x_0 is None:
        self.x_0 = geometry_msgs.msg.Point()
      if self.x_f is None:
        self.x_f = geometry_msgs.msg.Point()
      if self.nodes is None:
        self.nodes = geometry_msgs.msg.PoseArray()
      if self.radii is None:
        self.radii = std_msgs.msg.Float64MultiArray()
      if self.which_radius_array is None:
        self.which_radius_array = std_msgs.msg.Int64MultiArray()
      if self.this_path is None:
        self.this_path = std_msgs.msg.Int64MultiArray()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.x_0.x, _x.x_0.y, _x.x_0.z, _x.x_f.x, _x.x_f.y, _x.x_f.z, _x.U_max, _x.nodes.header.seq, _x.nodes.header.stamp.secs, _x.nodes.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nodes.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.nodes.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodes.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.nodes.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radii.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.radii.layout.dim.append(val1)
      start = end
      end += 4
      (self.radii.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.radii.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 32
      (_x.num_steps, _x.num_this_path, _x.type_of_dynamics, _x.delta_t,) = _get_struct_3qd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.which_radius_array.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.which_radius_array.layout.dim.append(val1)
      start = end
      end += 4
      (self.which_radius_array.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.which_radius_array.data = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.this_path.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.this_path.layout.dim.append(val1)
      start = end
      end += 4
      (self.this_path.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.this_path.data = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_3qd = None
def _get_struct_3qd():
    global _struct_3qd
    if _struct_3qd is None:
        _struct_3qd = struct.Struct("<3qd")
    return _struct_3qd
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hivemind/CVXpyResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class CVXpyResponse(genpy.Message):
  _md5sum = "281be2cb3229293f0f36c1d2e7cc90d3"
  _type = "hivemind/CVXpyResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseArray x_opt
geometry_msgs/PoseArray u_opt
float64 cost


================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['x_opt','u_opt','cost']
  _slot_types = ['geometry_msgs/PoseArray','geometry_msgs/PoseArray','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_opt,u_opt,cost

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CVXpyResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_opt is None:
        self.x_opt = geometry_msgs.msg.PoseArray()
      if self.u_opt is None:
        self.u_opt = geometry_msgs.msg.PoseArray()
      if self.cost is None:
        self.cost = 0.
    else:
      self.x_opt = geometry_msgs.msg.PoseArray()
      self.u_opt = geometry_msgs.msg.PoseArray()
      self.cost = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.x_opt.header.seq, _x.x_opt.header.stamp.secs, _x.x_opt.header.stamp.nsecs))
      _x = self.x_opt.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.x_opt.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.x_opt.poses:
        _v9 = val1.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.orientation
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_3I().pack(_x.u_opt.header.seq, _x.u_opt.header.stamp.secs, _x.u_opt.header.stamp.nsecs))
      _x = self.u_opt.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.u_opt.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.u_opt.poses:
        _v11 = val1.position
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.orientation
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      buff.write(_get_struct_d().pack(self.cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.x_opt is None:
        self.x_opt = geometry_msgs.msg.PoseArray()
      if self.u_opt is None:
        self.u_opt = geometry_msgs.msg.PoseArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.x_opt.header.seq, _x.x_opt.header.stamp.secs, _x.x_opt.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.x_opt.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.x_opt.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.x_opt.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v13 = val1.position
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.orientation
        _x = _v14
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.x_opt.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.u_opt.header.seq, _x.u_opt.header.stamp.secs, _x.u_opt.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.u_opt.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.u_opt.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.u_opt.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v15 = val1.position
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.orientation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.u_opt.poses.append(val1)
      start = end
      end += 8
      (self.cost,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.x_opt.header.seq, _x.x_opt.header.stamp.secs, _x.x_opt.header.stamp.nsecs))
      _x = self.x_opt.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.x_opt.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.x_opt.poses:
        _v17 = val1.position
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = val1.orientation
        _x = _v18
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_3I().pack(_x.u_opt.header.seq, _x.u_opt.header.stamp.secs, _x.u_opt.header.stamp.nsecs))
      _x = self.u_opt.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.u_opt.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.u_opt.poses:
        _v19 = val1.position
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v20 = val1.orientation
        _x = _v20
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      buff.write(_get_struct_d().pack(self.cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.x_opt is None:
        self.x_opt = geometry_msgs.msg.PoseArray()
      if self.u_opt is None:
        self.u_opt = geometry_msgs.msg.PoseArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.x_opt.header.seq, _x.x_opt.header.stamp.secs, _x.x_opt.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.x_opt.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.x_opt.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.x_opt.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v21 = val1.position
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v22 = val1.orientation
        _x = _v22
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.x_opt.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.u_opt.header.seq, _x.u_opt.header.stamp.secs, _x.u_opt.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.u_opt.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.u_opt.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.u_opt.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v23 = val1.position
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v24 = val1.orientation
        _x = _v24
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.u_opt.poses.append(val1)
      start = end
      end += 8
      (self.cost,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class CVXpy(object):
  _type          = 'hivemind/CVXpy'
  _md5sum = 'c0d55e6e98e4357c0e73f9e900c18298'
  _request_class  = CVXpyRequest
  _response_class = CVXpyResponse
