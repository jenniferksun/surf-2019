// Generated by gencpp from file hivemind/SATO_controller.msg
// DO NOT EDIT!


#ifndef HIVEMIND_MESSAGE_SATO_CONTROLLER_H
#define HIVEMIND_MESSAGE_SATO_CONTROLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace hivemind
{
template <class ContainerAllocator>
struct SATO_controller_
{
  typedef SATO_controller_<ContainerAllocator> Type;

  SATO_controller_()
    : name()
    , initial_position()  {
    }
  SATO_controller_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , initial_position(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _initial_position_type;
  _initial_position_type initial_position;





  typedef boost::shared_ptr< ::hivemind::SATO_controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hivemind::SATO_controller_<ContainerAllocator> const> ConstPtr;

}; // struct SATO_controller_

typedef ::hivemind::SATO_controller_<std::allocator<void> > SATO_controller;

typedef boost::shared_ptr< ::hivemind::SATO_controller > SATO_controllerPtr;
typedef boost::shared_ptr< ::hivemind::SATO_controller const> SATO_controllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hivemind::SATO_controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hivemind::SATO_controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hivemind

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'hivemind': ['/home/jksun/surf-2019/jksun_ws/src/ros_hivemind/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hivemind::SATO_controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hivemind::SATO_controller_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hivemind::SATO_controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hivemind::SATO_controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hivemind::SATO_controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hivemind::SATO_controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hivemind::SATO_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c03a91c04ace9722de7dbeaf894c70ca";
  }

  static const char* value(const ::hivemind::SATO_controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc03a91c04ace9722ULL;
  static const uint64_t static_value2 = 0xde7dbeaf894c70caULL;
};

template<class ContainerAllocator>
struct DataType< ::hivemind::SATO_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hivemind/SATO_controller";
  }

  static const char* value(const ::hivemind::SATO_controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hivemind::SATO_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Used for SATO guidance to figure out what other controllers exist/order them\n"
"string name                         #the unique name of the controller\n"
"geometry_msgs/Point initial_position   #the position of this controller before SATO runs\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hivemind::SATO_controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hivemind::SATO_controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.initial_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SATO_controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hivemind::SATO_controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hivemind::SATO_controller_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "initial_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.initial_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIVEMIND_MESSAGE_SATO_CONTROLLER_H
