// Generated by gencpp from file hivemind/CVXpyRequest.msg
// DO NOT EDIT!


#ifndef HIVEMIND_MESSAGE_CVXPYREQUEST_H
#define HIVEMIND_MESSAGE_CVXPYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/PoseArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Int64MultiArray.h>
#include <std_msgs/Int64MultiArray.h>

namespace hivemind
{
template <class ContainerAllocator>
struct CVXpyRequest_
{
  typedef CVXpyRequest_<ContainerAllocator> Type;

  CVXpyRequest_()
    : x_0()
    , x_f()
    , U_max(0.0)
    , nodes()
    , radii()
    , num_steps(0)
    , num_this_path(0)
    , type_of_dynamics(0)
    , delta_t(0.0)
    , which_radius_array()
    , this_path()  {
    }
  CVXpyRequest_(const ContainerAllocator& _alloc)
    : x_0(_alloc)
    , x_f(_alloc)
    , U_max(0.0)
    , nodes(_alloc)
    , radii(_alloc)
    , num_steps(0)
    , num_this_path(0)
    , type_of_dynamics(0)
    , delta_t(0.0)
    , which_radius_array(_alloc)
    , this_path(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _x_0_type;
  _x_0_type x_0;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _x_f_type;
  _x_f_type x_f;

   typedef double _U_max_type;
  _U_max_type U_max;

   typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _nodes_type;
  _nodes_type nodes;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _radii_type;
  _radii_type radii;

   typedef int64_t _num_steps_type;
  _num_steps_type num_steps;

   typedef int64_t _num_this_path_type;
  _num_this_path_type num_this_path;

   typedef int64_t _type_of_dynamics_type;
  _type_of_dynamics_type type_of_dynamics;

   typedef double _delta_t_type;
  _delta_t_type delta_t;

   typedef  ::std_msgs::Int64MultiArray_<ContainerAllocator>  _which_radius_array_type;
  _which_radius_array_type which_radius_array;

   typedef  ::std_msgs::Int64MultiArray_<ContainerAllocator>  _this_path_type;
  _this_path_type this_path;





  typedef boost::shared_ptr< ::hivemind::CVXpyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hivemind::CVXpyRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CVXpyRequest_

typedef ::hivemind::CVXpyRequest_<std::allocator<void> > CVXpyRequest;

typedef boost::shared_ptr< ::hivemind::CVXpyRequest > CVXpyRequestPtr;
typedef boost::shared_ptr< ::hivemind::CVXpyRequest const> CVXpyRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hivemind::CVXpyRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hivemind::CVXpyRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hivemind

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'hivemind': ['/home/jksun/surf-2019/jksun_ws/src/ros_hivemind/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hivemind::CVXpyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hivemind::CVXpyRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hivemind::CVXpyRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hivemind::CVXpyRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hivemind::CVXpyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hivemind::CVXpyRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hivemind::CVXpyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e30bdb1c0d2912e355585699a39d0ac";
  }

  static const char* value(const ::hivemind::CVXpyRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e30bdb1c0d2912eULL;
  static const uint64_t static_value2 = 0x355585699a39d0acULL;
};

template<class ContainerAllocator>
struct DataType< ::hivemind::CVXpyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hivemind/CVXpyRequest";
  }

  static const char* value(const ::hivemind::CVXpyRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hivemind::CVXpyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point x_0\n"
"geometry_msgs/Point x_f\n"
"float64 U_max\n"
"geometry_msgs/PoseArray nodes\n"
"std_msgs/Float64MultiArray radii\n"
"int64 num_steps\n"
"int64 num_this_path\n"
"int64 type_of_dynamics\n"
"float64 delta_t\n"
"std_msgs/Int64MultiArray which_radius_array\n"
"std_msgs/Int64MultiArray this_path\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseArray\n"
"# An array of poses with a header for global reference.\n"
"\n"
"Header header\n"
"\n"
"Pose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Int64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"int64[]           data          # array of data\n"
"\n"
;
  }

  static const char* value(const ::hivemind::CVXpyRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hivemind::CVXpyRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_0);
      stream.next(m.x_f);
      stream.next(m.U_max);
      stream.next(m.nodes);
      stream.next(m.radii);
      stream.next(m.num_steps);
      stream.next(m.num_this_path);
      stream.next(m.type_of_dynamics);
      stream.next(m.delta_t);
      stream.next(m.which_radius_array);
      stream.next(m.this_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CVXpyRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hivemind::CVXpyRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hivemind::CVXpyRequest_<ContainerAllocator>& v)
  {
    s << indent << "x_0: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.x_0);
    s << indent << "x_f: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.x_f);
    s << indent << "U_max: ";
    Printer<double>::stream(s, indent + "  ", v.U_max);
    s << indent << "nodes: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.nodes);
    s << indent << "radii: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.radii);
    s << indent << "num_steps: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_steps);
    s << indent << "num_this_path: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_this_path);
    s << indent << "type_of_dynamics: ";
    Printer<int64_t>::stream(s, indent + "  ", v.type_of_dynamics);
    s << indent << "delta_t: ";
    Printer<double>::stream(s, indent + "  ", v.delta_t);
    s << indent << "which_radius_array: ";
    s << std::endl;
    Printer< ::std_msgs::Int64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.which_radius_array);
    s << indent << "this_path: ";
    s << std::endl;
    Printer< ::std_msgs::Int64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.this_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIVEMIND_MESSAGE_CVXPYREQUEST_H
