// Generated by gencpp from file hivemind/SATORequest.msg
// DO NOT EDIT!


#ifndef HIVEMIND_MESSAGE_SATOREQUEST_H
#define HIVEMIND_MESSAGE_SATOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace hivemind
{
template <class ContainerAllocator>
struct SATORequest_
{
  typedef SATORequest_<ContainerAllocator> Type;

  SATORequest_()
    : initial_positions()
    , final_positions()
    , n(0)
    , index(0)  {
    }
  SATORequest_(const ContainerAllocator& _alloc)
    : initial_positions(_alloc)
    , final_positions(_alloc)
    , n(0)
    , index(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _initial_positions_type;
  _initial_positions_type initial_positions;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _final_positions_type;
  _final_positions_type final_positions;

   typedef int32_t _n_type;
  _n_type n;

   typedef int32_t _index_type;
  _index_type index;





  typedef boost::shared_ptr< ::hivemind::SATORequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hivemind::SATORequest_<ContainerAllocator> const> ConstPtr;

}; // struct SATORequest_

typedef ::hivemind::SATORequest_<std::allocator<void> > SATORequest;

typedef boost::shared_ptr< ::hivemind::SATORequest > SATORequestPtr;
typedef boost::shared_ptr< ::hivemind::SATORequest const> SATORequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hivemind::SATORequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hivemind::SATORequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hivemind

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'hivemind': ['/home/jksun/surf-2019/jksun_ws/src/ros_hivemind/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hivemind::SATORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hivemind::SATORequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hivemind::SATORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hivemind::SATORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hivemind::SATORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hivemind::SATORequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hivemind::SATORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fe277a57646632f33e40f2ce2b6d017";
  }

  static const char* value(const ::hivemind::SATORequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fe277a57646632fULL;
  static const uint64_t static_value2 = 0x33e40f2ce2b6d017ULL;
};

template<class ContainerAllocator>
struct DataType< ::hivemind::SATORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hivemind/SATORequest";
  }

  static const char* value(const ::hivemind::SATORequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hivemind::SATORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] initial_positions\n"
"geometry_msgs/Point[] final_positions\n"
"int32 n\n"
"int32 index\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hivemind::SATORequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hivemind::SATORequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.initial_positions);
      stream.next(m.final_positions);
      stream.next(m.n);
      stream.next(m.index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SATORequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hivemind::SATORequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hivemind::SATORequest_<ContainerAllocator>& v)
  {
    s << indent << "initial_positions[]" << std::endl;
    for (size_t i = 0; i < v.initial_positions.size(); ++i)
    {
      s << indent << "  initial_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.initial_positions[i]);
    }
    s << indent << "final_positions[]" << std::endl;
    for (size_t i = 0; i < v.final_positions.size(); ++i)
    {
      s << indent << "  final_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.final_positions[i]);
    }
    s << indent << "n: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIVEMIND_MESSAGE_SATOREQUEST_H
