// Generated by gencpp from file hivemind/CVXpyResponse.msg
// DO NOT EDIT!


#ifndef HIVEMIND_MESSAGE_CVXPYRESPONSE_H
#define HIVEMIND_MESSAGE_CVXPYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseArray.h>
#include <geometry_msgs/PoseArray.h>

namespace hivemind
{
template <class ContainerAllocator>
struct CVXpyResponse_
{
  typedef CVXpyResponse_<ContainerAllocator> Type;

  CVXpyResponse_()
    : x_opt()
    , u_opt()
    , cost(0.0)  {
    }
  CVXpyResponse_(const ContainerAllocator& _alloc)
    : x_opt(_alloc)
    , u_opt(_alloc)
    , cost(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _x_opt_type;
  _x_opt_type x_opt;

   typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _u_opt_type;
  _u_opt_type u_opt;

   typedef double _cost_type;
  _cost_type cost;





  typedef boost::shared_ptr< ::hivemind::CVXpyResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hivemind::CVXpyResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CVXpyResponse_

typedef ::hivemind::CVXpyResponse_<std::allocator<void> > CVXpyResponse;

typedef boost::shared_ptr< ::hivemind::CVXpyResponse > CVXpyResponsePtr;
typedef boost::shared_ptr< ::hivemind::CVXpyResponse const> CVXpyResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hivemind::CVXpyResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hivemind::CVXpyResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hivemind

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'hivemind': ['/home/jksun/surf-2019/jksun_ws/src/ros_hivemind/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hivemind::CVXpyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hivemind::CVXpyResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hivemind::CVXpyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hivemind::CVXpyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hivemind::CVXpyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hivemind::CVXpyResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hivemind::CVXpyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "281be2cb3229293f0f36c1d2e7cc90d3";
  }

  static const char* value(const ::hivemind::CVXpyResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x281be2cb3229293fULL;
  static const uint64_t static_value2 = 0x0f36c1d2e7cc90d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::hivemind::CVXpyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hivemind/CVXpyResponse";
  }

  static const char* value(const ::hivemind::CVXpyResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hivemind::CVXpyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseArray x_opt\n"
"geometry_msgs/PoseArray u_opt\n"
"float64 cost\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseArray\n"
"# An array of poses with a header for global reference.\n"
"\n"
"Header header\n"
"\n"
"Pose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::hivemind::CVXpyResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hivemind::CVXpyResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_opt);
      stream.next(m.u_opt);
      stream.next(m.cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CVXpyResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hivemind::CVXpyResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hivemind::CVXpyResponse_<ContainerAllocator>& v)
  {
    s << indent << "x_opt: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.x_opt);
    s << indent << "u_opt: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.u_opt);
    s << indent << "cost: ";
    Printer<double>::stream(s, indent + "  ", v.cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIVEMIND_MESSAGE_CVXPYRESPONSE_H
